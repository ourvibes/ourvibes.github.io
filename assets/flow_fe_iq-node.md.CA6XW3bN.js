import{_ as s,c as i,o as a,a2 as e}from"./chunks/framework.CVjco_zO.js";const g=JSON.parse('{"title":"Q&A - node","description":"","frontmatter":{"title":"Q&A - node"},"headers":[],"relativePath":"flow/fe/iq-node.md","filePath":"flow/fe/iq-node.md"}'),l={name:"flow/fe/iq-node.md"},n=e(`<details class="details custom-block"><summary>Node性能如何进行监控以及优化？</summary><p>Node作为一门服务端语言，性能方面尤为重要，其衡量指标一般有如下：</p><ul><li><p>CPU</p></li><li><p>内存</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /app/lib/memory.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> os</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;os&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取当前Node内存堆栈情况</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">heapUsed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">heapTotal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memoryUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取系统空闲内存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sysFree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">freemem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取系统总内存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sysTotal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">totalmem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  memory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      sys: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sysFree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sysTotal,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 系统内存占用率</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      heap: heapUsed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headTotal,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Node堆内存占用率</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      node: rss </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sysTotal,         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Node占用系统内存的比例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>I/O</li><li>网络</li></ul></details><details class="details custom-block"><summary>如何实现jwt鉴权机制？说说你的思路</summary><p>JWT（JSON Web Token），分成了三部分，头部（<code>Header</code>）、载荷（<code>Payload</code>）、签名（<code>Signature</code>），并以.进行拼接。其中头部和载荷都是以<code>JSON</code>格式存放数据，只是进行了<code>Base64编码</code>。</p><ul><li>header（声明使用的算法）</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;alg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HS256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;typ&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JWT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ul><li>payload（内容）</li><li>Signature（签名是对头部和载荷内容进行签名，一般情况，设置一个secretKey，对前两个的结果进行加密）</li></ul></details><details class="details custom-block"><summary>说说对Nodejs中的事件循环机制理解?</summary><p>Node.js 的事件循环机制是其核心特性之一，它使得 Node.js 能够以<code>非阻塞</code>的方式<code>处理 I/O 操作</code>，从而实现<code>高并发</code>和高效能的服务器开发。以下是对 Node.js 中事件循环机制的理解：</p><h3 id="_1-事件循环的概念" tabindex="-1">1. 事件循环的概念 <a class="header-anchor" href="#_1-事件循环的概念" aria-label="Permalink to &quot;1. 事件循环的概念&quot;">​</a></h3><p>事件循环是 Node.js 中用于处理异步事件和回调函数的机制。它<code>不断监视事件队列</code>，一旦队列中有待处理的事件，就将其出队并执行相应的回调函数。</p><h3 id="_2-事件循环的组成部分" tabindex="-1">2. 事件循环的组成部分 <a class="header-anchor" href="#_2-事件循环的组成部分" aria-label="Permalink to &quot;2. 事件循环的组成部分&quot;">​</a></h3><ul><li><strong>事件队列</strong>：存放待处理的事件和相应的回调函数。当异步操作完成时，其回调函数会被推入事件队列等待执行。</li><li><strong>事件循环</strong>：一个无限循环，不断从事件队列中取出事件并执行其回调函数。</li><li><strong>执行栈</strong>：用于同步执行 JavaScript 代码的地方。当调用一个函数时，它会被推入执行栈；当函数执行完成后，它会被从执行栈中弹出。</li></ul><h3 id="_3-工作原理" tabindex="-1">3. 工作原理 <a class="header-anchor" href="#_3-工作原理" aria-label="Permalink to &quot;3. 工作原理&quot;">​</a></h3><ul><li>当 Node.js 启动时，它会初始化事件循环和执行栈。</li><li>当同步代码执行时，它会被推入执行栈并立即执行。</li><li>当遇到异步操作时（如文件读取、网络请求等），Node.js 不会等待操作完成，而是立即继续执行后续代码或返回事件循环。</li><li>当异步操作完成时，其回调函数会被推入事件队列。</li><li>事件循环会不断检查执行栈是否为空。如果为空，则从事件队列中取出一个事件并执行其回调函数。回调函数执行时会被推入执行栈，执行完成后从执行栈中弹出。</li><li>这个过程不断重复，形成了 Node.js 的事件循环。</li></ul><h3 id="_4-优点与注意事项" tabindex="-1">4. 优点与注意事项 <a class="header-anchor" href="#_4-优点与注意事项" aria-label="Permalink to &quot;4. 优点与注意事项&quot;">​</a></h3><ul><li><strong>优点</strong>：通过事件循环和非阻塞 I/O，Node.js 能够高效地处理大量并发请求，特别适用于 I/O 密集型应用。</li><li><strong>注意事项</strong>：由于 JavaScript 在 Node.js 中是单线程的，长时间的 CPU 计算任务会阻塞事件循环，影响性能。因此，对于 CPU 密集型任务，应考虑使用子进程或工作线程来处理。</li></ul><h3 id="_5-与其他技术的比较" tabindex="-1">5. 与其他技术的比较 <a class="header-anchor" href="#_5-与其他技术的比较" aria-label="Permalink to &quot;5. 与其他技术的比较&quot;">​</a></h3><ul><li>与传统的多线程模型相比，Node.js 的单线程事件循环模型减少了线程间通信和同步的开销，从而简化了编程模型并提高了性能。</li><li>与其他异步编程模型（如回调、Promise、async/await）相比，事件循环是 Node.js 实现异步编程的基础机制。这些高级异步编程技术都是基于事件循环来工作的。</li></ul><p>综上所述，Node.js 的事件循环机制是其实现高并发和高效能的关键所在。理解并掌握这一机制对于深入学习和应用 Node.js 具有重要意义。</p></details><details class="details custom-block"><summary>Node. js 有哪些全局对象？</summary><p>Node.js 中的全局对象主要包括以下几个：</p><ol><li><strong>global 对象</strong>：在 Node.js 中，<code>global</code> 对象是一个全局可用的对象，它类似于浏览器环境中的 <code>window</code> 对象。<code>global</code> 对象作为全局变量的宿主，提供了在程序的任何地方访问全局变量的能力。所有全局变量（除了 <code>global</code> 本身以外）都是 <code>global</code> 对象的属性。</li><li><strong>process 对象</strong>：<code>process</code> 对象是一个全局变量，提供了有关当前 Node.js 进程的信息和控制。通过 <code>process</code> 对象，我们可以处理命令行参数、获取环境变量、控制进程的行为等。它还包含了一些有用的方法，如 <code>exit()</code>（用于终止进程）和 <code>nextTick()</code>（用于在事件循环的当前迭代结束后执行回调）。</li><li><strong>console 对象</strong>：<code>console</code> 对象用于在控制台输出信息。它提供了一系列的方法，如 <code>log()</code>、<code>error()</code>、<code>warn()</code> 等，用于在开发过程中进行调试和记录日志。</li><li><strong>__filename 和 __dirname</strong>：这两个是全局变量，而非对象。<code>__filename</code> 是一个包含当前执行脚本的完整文件路径的字符串，而 <code>__dirname</code> 是一个字符串，表示当前执行脚本所在的目录的绝对路径。这两个变量在需要引用文件或目录路径时非常有用。</li><li><strong>Buffer 类</strong>：虽然不是一个全局对象，但 <code>Buffer</code> 类在 Node.js 中也是全局可用的。它用于处理二进制数据，提供了在 TCP 流、文件系统操作、以及其他上下文中处理字节流的接口。</li><li><strong>setTimeout, setInterval, clearTimeout, clearInterval</strong>：这些函数也是全局可用的，用于在 Node.js 中设置和清除定时器。它们通常用于执行延迟操作或周期性任务。</li></ol><p>这些全局对象和变量在 Node.js 程序中广泛使用，帮助开发者更方便地处理各种任务和操作。然而，为了避免命名冲突和提高代码的可读性和可维护性，建议将变量和函数定义在模块的作用域内，而不是直接使用全局作用域。</p></details><details class="details custom-block"><summary>require 查找过程</summary><p>在 Node.js 中，<code>require</code> 函数用于导入和执行 JavaScript 模块。当你使用 <code>require</code> 函数导入一个模块时，Node.js 会遵循一定的查找过程来找到并加载该模块。下面是 <code>require</code> 的查找过程的基本步骤：</p><ol><li><p><strong>核心模块</strong>：Node.js 首先检查导入的模块名是否为核心模块（如 <code>fs</code>, <code>http</code>, <code>path</code> 等）。如果是，Node.js 会直接从其内部核心模块中加载该模块，并返回导出的对象。</p></li><li><p><strong>文件路径</strong>：如果导入的模块名不是核心模块，Node.js 会尝试将其解析为文件路径。它会检查相对路径或绝对路径，这取决于你提供的模块名。例如，如果你写 <code>require(&#39;./myModule&#39;)</code>，Node.js 会查找当前目录下的 <code>myModule.js</code> 文件。</p></li><li><p><strong>NODE_PATH</strong>：如果 Node.js 还没有找到模块，它会检查环境变量 <code>NODE_PATH</code> 中指定的目录。<code>NODE_PATH</code> 是一个由冒号分隔的目录列表，Node.js 会在这些目录中查找模块。</p></li><li><p><strong>node_modules 目录</strong>：如果上述步骤都没有找到模块，Node.js 会开始在当前模块的父目录（即包含当前执行脚本的目录）中查找 <code>node_modules</code> 目录。它会继续向上查找，直到找到根目录或找到所需的模块。这个过程被称为“模块解析”。</p><ul><li>首先，它会检查当前目录的 <code>node_modules</code>。</li><li>如果没有找到，它会向上检查父目录的 <code>node_modules</code>。</li><li>这个过程会一直持续，直到到达文件系统的根目录或找到所需的模块。</li></ul></li><li><p><strong>全局安装</strong>：如果你使用的是全局安装的 npm 包（例如通过 <code>npm install -g packageName</code>），并且该包没有遵循标准的 <code>node_modules</code> 查找路径，你可能需要确保 <code>NODE_PATH</code> 环境变量包含全局 <code>node_modules</code> 目录的路径。</p></li><li><p><strong>抛出错误</strong>：如果经过上述所有步骤后，Node.js 仍然无法找到模块，它会抛出一个错误，告诉你无法找到指定的模块。</p></li></ol><p>注意：Node.js 的模块查找机制基于其模块解析算法，该算法的具体实现可能会随着 Node.js 版本的更新而有所变化。因此，建议查阅最新的 Node.js 文档以获取最准确的信息。</p></details><details class="details custom-block"><summary>koa 洋葱圈模型原理</summary><p>Koa的洋葱圈模型原理是将<code>请求和响应分别封装在一个对象中</code>，然后通过一系列的<code>中间件</code>来处理这些对象。每个中间件都可以对请求和响应进行一些操作，然后将它们<code>传递给下一个中间件</code>。这个过程就像是一个洋葱圈，每个中间件都像是一个圈，请求和响应就像是在圈里面传递。</p><p>具体来说，在Koa中，中间件是一个函数，它接收两个参数：ctx和next。<code>ctx</code>是一个包含<code>请求和响应的对象</code>，<code>next</code>是一个函数，用于<code>将请求和响应传递给下一个中间件</code>。中间件的执行顺序是按照它们被<code>注册的顺序来执行的</code>。</p><p>在洋葱圈模型中，请求和响应都会通过一系列中间件。这些中间件会按照特定的顺序调用，直至最终的响应返回给客户端。每个中间件都可以进行某些操作，比如修改请求或响应的头部信息、记录请求信息、检查权限等等。</p><p>与传统中间件层不同，Koa的洋葱圈模型强调了一种更加优雅的代码结构。在一个Koa应用中，中间件可以按照任意顺序配置，甚至可以在运行时动态添加或删除中间件。</p><p>在处理过程中，Koa首先执行第一个中间件，该中间件对请求进行一些处理后，调用next()方法将请求和响应传递给下一个中间件。当第一个中间件调用next()方法时，Koa会依次执行后面的中间件。特别的是，Koa会在执行完每个中间件之后再一次回到前一个中间件，即从最后一个中间件开始，每次调用next()方法之后的控制权逐级返回回来，直到第一个中间件。最后，Koa会把处理后的响应返回给客户端。</p><p>总的来说，Koa的洋葱圈模型以其独特的<code>中间件流程控制机制</code>，提供了一种优雅、简洁的Web开发模式，使得开发人员可以用一种更加优美的方式来处理HTTP请求和响应。</p></details>`,6),o=[n];function t(d,p,h,k,r,c){return a(),i("div",null,o)}const y=s(l,[["render",t]]);export{g as __pageData,y as default};
